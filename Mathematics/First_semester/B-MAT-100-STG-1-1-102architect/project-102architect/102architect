#!/usr/bin/env python3
##
## EPITECH PROJECT, 2023
## B-MAT-100-STG-1-1-102architect-raphael.petrequin
## File description:
## 102architect
##

import math, sys

#_____handling errors________________________________________________________

#_____extract all the args_____
if __name__ == '__main__':
    arguments = sys.argv

#_____handle nb of args_____
if len(sys.argv) > 13:
    print ("Too much arguments", sep='', file=sys.stderr)
    sys.exit(84)
if len(sys.argv) < 5:
    print ("Too few arguments", sep='', file=sys.stderr)
    sys.exit(84)

#_____handle value of x and y_____
try:
    (int)(arguments[1]) and (int)(arguments[2])
except ValueError:
    print ("x and y have to be integers", sep='', file=sys.stderr)
    sys.exit(84)

#_____handle transformations' flags and their args_____
def handling_error_t_z(arguments, index):
    try:
        (int)(arguments[index + 1]) and (int)(arguments[index + 2])
    except ValueError:
        print ("arguments have to be integers", sep='', file=sys.stderr)
        exit(84)
def handling_error_r_s(arguments, index):
    try:
        (int)(arguments[index + 1])
    except ValueError:
        print ("argument have to be an integer", sep='', file=sys.stderr)
        exit(84)

index = 3
while (index < len(arguments)):

    #for transformations' flags with 2 args
    if (arguments[index] == "-t" or arguments[index] == "-z"):
        if index + 3 > len(arguments):
            print ("Need 2 arguments", sep='', file=sys.stderr)
            exit(84)
        if (arguments[index][1] == 't'):
            handling_error_t_z(arguments, index);
        if (arguments[index][1] == 'z'):
            handling_error_t_z(arguments, index);
        index = index + 3;

    #for transformations' flags with 1 arg
    elif (arguments[index] == "-r" or arguments[index] == "-s"):
        if index + 2 > len(arguments):
            print ("Need 1 argument", sep='', file=sys.stderr)
            exit(84)
        if (arguments[index][1] == 'r'):
            handling_error_r_s(arguments, index);
        if (arguments[index][1] == 's'):
            handling_error_r_s(arguments, index);
        index = index + 2;

    else:
        print ("Too much arguments or no transformation", sep='', file=sys.stderr);
        exit(84)

#____________________________________________________________________________

#_____main with all the need to run 102architect_____________________________

def main():

    # Extract command line arguments
    try:
        x = int(sys.argv[1])
        y = int(sys.argv[2])
    except IndexError:
        sys.exit(84)

    # Initialize transformation matrix
    matrice = [1.00, 0.00, 0.00,
               0.00, 1.00, 0.00,
               0.00, 0.00, 1.00]

    def translation(i, j):
        print("Translation along vector (",int(i), ", ", int(j), ")", sep="")
        matrice[2] = i
        matrice[5] = j

    def scaling(m, n):
        print("Scaling by factors ",int(m), " and ", int(n), sep="")
        matrice[0] = m
        matrice[4] = n

    def rotation(angle):
        print("Rotation by a ", int(angle), " degree angle", sep="")

        # Rotates by x degree angle
        matrice[0] = math.cos(float(angle) / 180 * math.pi)
        matrice[1] = -math.sin(float(angle) / 180 * math.pi)
        matrice[3] = math.sin(float(angle) / 180 * math.pi)
        matrice[4] = -matrice[0]

    def reflection(angle):
        print("Reflection over an axis with an inclination angle of ", int(angle), " degrees", sep="")

        # Update the symmetry matrix
        matrice[0] = math.cos(2 * float(angle) / 180 * math.pi)
        matrice[1] = -math.sin(2 * float(angle) / 180 * math.pi)
        matrice[3] = math.sin(2 * float(angle) / 180 * math.pi)
        matrice[4] = -matrice[0]

    # Check command line flags
    index = 3
    for index in range(len(sys.argv)):
        if sys.argv[index] == "-t":
            translation(float(sys.argv[index + 1]), float(sys.argv[index + 2]))
        if sys.argv[index] == "-z":
            scaling(float(sys.argv[index + 1]), float(sys.argv[index + 2]))
        if sys.argv[index] == "-r":
            rotation(float(sys.argv[index + 1]))
        if sys.argv[index] == "-s":
            reflection(float(sys.argv[index + 1]))

    for i in range(0, 9):
        if str(matrice[i]) == "-3.6739403974420594e-16" or \
           str(matrice[i]) == "-6.123233995736766e-17":
            matrice[i] = abs(matrice[i])

    # Print the resulting transformation matrix
    print("%.2f" % matrice[0], "\t%.2f" % matrice[1], "\t%.2f" % matrice[2], sep="")
    print("%.2f" % matrice[3], "\t%.2f" % matrice[4], "\t%.2f" % matrice[5], sep="")
    print("%.2f" % matrice[6], "\t%.2f" % matrice[7], "\t%.2f" % matrice[8], sep="")

    # Apply the transformation to the input point and print the result
    it_was = matrice[0] * x + matrice[1] * y + matrice[2]
    it_is = matrice[3] * x + matrice[4] * y + matrice[5]

    print(f"({float(x):.2f}, {float(y):.2f}) => ({it_was:.2f}, {it_is:.2f})")
#____________________________________________________________________________

#_____run main_____
if __name__ == '__main__':
    main()
