#!/usr/bin/env python3
##
## EPITECH PROJECT, 2023
## B-MAT-100-STG-1-1-103cipher-raphael.petrequin
## File description:
## 103cipher
##

import math
import sys

#_____USAGE__________________________________________________________________
if len(sys.argv) == 2 and sys.argv[1] == "-h":
    print("USAGE", sep="")
    print("    ./103cipher message key flag\n", sep="")
    print("DESCRIPTION", sep="")
    print("    message\ta message, made of ASCII characters", sep="")
    print("    key\t\tthe encryption key, made of ASCII characters", sep="")
    print("    flag\t0 for the message to be encrypted, 1 to be decrypted", sep="")
    sys.exit(0)
#____________________________________________________________________________

#_____HANDLING_ERRORS________________________________________________________

#handling number of args
if len(sys.argv) < 4:
    print("Too few arguments", sep='', file=sys.stderr)
    sys.exit(84)
if len(sys.argv) > 4:
    print("Too much arguments", sep='', file=sys.stderr)
    sys.exit(84)

# handling for 1st arg
try:
    if float(sys.argv[1]) != False:
        print("The MESSAGE have to be a string", sep='', file=sys.stderr)
        sys.exit(84)
except ValueError:
    pass
try:
    if int(sys.argv[1]) != False:
        print("The MESSAGE have to be a string", sep='', file=sys.stderr)
        sys.exit(84)
except ValueError:
    pass

# handling for 2nd arg
try:
    if float(sys.argv[2]) != False:
        print("The KEY have to be a string", sep='', file=sys.stderr)
        sys.exit(84)
except ValueError:
    pass
try:
    if int(sys.argv[2]) != False:
        print("The KEY have to be a string", sep='', file=sys.stderr)
        sys.exit(84)
except ValueError:
    pass

# handling for 3rd arg
try:
    int(sys.argv[3])
except ValueError:
    print("The FLAG have to be an int", sep='', file=sys.stderr)
    sys.exit(84)
#____________________________________________________________________________

# Functions for encryption

# Function to create a key matrix from the key string
def create_key_matrix(key_string, size):
    key_matrix = []
    k = 0
    for i in range(size):
        key_matrix.append([])
        for j in range(size):
            if k < len(key_string):
                # Appending ASCII value of each character
                key_matrix[i].append(ord(key_string[k]))
                k += 1
            else:
                # Filling the remaining matrix with 0s
                key_matrix[i].append(0)
    return key_matrix

# Function to convert the message into a matrix for encryption
def convert_message_to_matrix(message, size):
    message_matrix = []
    k = 0
    nbr = math.ceil(len(message) / size)
    for i in range(nbr):
        message_matrix.append([])
        for j in range(size):
            if k < len(message):
                # Appending ASCII value of each character
                message_matrix[i].append(ord(message[k]))
                k += 1
            else:
                # Filling the remaining matrix with 0s
                message_matrix[i].append(0)
    return message_matrix

# Function to multiply two matrices
def multiply_matrices(matrix_a, matrix_b):
    # Using list comprehension for matrix multiplication
    return [[sum(a * b for a, b in zip(row_a, col_b)) for col_b in zip(*matrix_b)] for row_a in matrix_a]

# Function to format the result matrix as a string
def format_result(matrix):
    # Joining all matrix elements into a string
    return ' '.join(str(cell) for row in matrix for cell in row)

# Main function for encryption
def cipher(message, key_string, flag):
    # Determining the size of the matrix
    size = math.ceil(math.sqrt(len(key_string)))
    key_matrix = create_key_matrix(key_string, size)

    # Converting message to matrix and encrypting
    message_matrix = convert_message_to_matrix(message, size)
    result_matrix = multiply_matrices(message_matrix, key_matrix)
    return key_matrix, format_result(result_matrix)

# Executing the cipher
flag = int(sys.argv[3])
if flag == 0:
    # Only proceed if flag is 0 (encryption)
    key_matrix, encrypted_message = cipher(sys.argv[1], sys.argv[2], flag)

    # Displaying the key matrix
    print("Key matrix:")
    for row in key_matrix:
        print('\t'.join(str(cell) for cell in row))

    # Displaying the encrypted message
    print("\nEncrypted message:\n" + encrypted_message)
else:
    # If flag is not 0, exit with an error
    print("The FLAG has to be 0 for encryption", sep='', file=sys.stderr)
    sys.exit(84)
